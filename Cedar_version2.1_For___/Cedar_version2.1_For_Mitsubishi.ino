#include <IRremote.h>                  // 引用 IRRemote 函式库
#include <avr/pgmspace.h>
#include <avr/wdt.h>             // flash数据存储
#include <VoiceRecognition.h>    // 语音识别函数库
VoiceRecognition Voice;

// DATA BASE Infra
const PROGMEM unsigned int rawCodes_ac_16c[583]={3444,1676,468,1228,468,1232,468,396,468,392,468,372,492,1204,492,396,468,392,468,1232,468,1228,472,392,468,1204,492,396,468,396,468,1228,472,1228,468,392,472,1228,468,1228,472,392,472,388,472,1228,468,396,468,368,492,1232,468,392,472,392,468,396,468,392,468,396,468,392,468,396,468,392,472,364,496,392,472,392,468,392,472,392,468,392,472,392,468,396,468,392,472,392,468,392,472,392,468,1228,472,392,468,392,472,368,492,372,492,392,468,1232,468,1228,472,392,468,1228,472,392,468,392,472,392,468,396,468,392,468,372,492,392,472,392,468,392,472,392,468,1232,468,1228,468,392,472,1228,468,1208,492,392,472,392,468,1228,468,1232,468,396,468,392,468,1228,472,392,468,1232,468,368,496,392,468,392,472,392,468,392,472,392,468,396,468,392,472,392,468,392,472,392,468,392,472,392,468,396,468,392,468,396,468,392,472,392,468,392,468,396,468,392,472,392,468,392,472,392,468,396,468,392,472,388,472,392,468,396,468,392,472,392,468,392,472,392,468,392,472,392,468,396,468,392,468,1232,468,392,468,396,468,392,472,392,468,392,472,368,492,396,468,392,468,348,516,368,492,396,468,392,472,364,496,396,468,392,468,392,472,392,468,392,472,392,472,392,468,1232,468,1228,468,396,468,392,468,1232,468,392,468,372,492,15728,3448,1676,468,1228,468,1232,468,372,492,392,468,392,472,1228,468,396,468,392,468,1232,468,1228,468,396,468,1228,472,392,468,392,472,1228,468,1232,468,368,492,1232,468,1228,472,392,468,396,468,1228,468,348,516,392,468,1232,468,392,468,372,492,392,472,392,468,392,472,392,468,392,472,392,468,392,472,392,472,392,468,392,472,392,468,392,468,396,468,392,472,392,468,392,472,392,468,348,516,1228,468,396,468,392,468,396,468,396,464,396,468,1232,468,1228,468,396,468,1228,468,396,468,392,468,396,468,392,472,392,468,392,472,368,492,396,468,368,492,396,468,1228,468,1232,468,396,468,1228,468,1208,492,392,468,396,468,1228,468,1232,468,392,468,396,468,1196,504,368,492,1228,472,392,468,396,468,392,468,396,468,392,468,396,468,396,468,392,468,396,468,392,468,396,468,392,468,340,528,388,472,388,472,392,468,396,468,392,472,392,468,396,468,392,468,396,468,392,468,396,468,368,496,392,468,392,472,392,468,396,468,392,468,396,468,392,468,396,468,356,504,396,468,392,468,396,468,1232,468,392,468,392,468,396,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,468,392,468,396,468,392,468,396,468,392,468,368,496,396,464,1232,468,1232,464,396,468,396,464,1236,464,396,468,392,468
};  // 16c code
const PROGMEM unsigned int rawCodes_ac_27c[583]={3448,1672,468,1232,468,1228,468,396,468,392,468,396,468,1232,468,392,468,348,516,1228,468,1208,492,392,468,1232,468,392,472,392,468,1228,468,1232,468,396,468,1228,468,1232,468,396,464,396,468,1232,468,392,468,396,468,1228,468,396,468,392,468,396,468,396,464,396,468,392,468,396,468,392,472,392,468,396,464,396,472,392,464,396,468,372,492,392,468,396,468,396,468,392,468,392,472,392,468,1232,464,396,468,396,468,392,468,396,468,392,468,1232,468,1232,468,392,468,1232,468,372,488,1232,468,1232,468,392,468,1232,464,396,468,396,464,396,468,368,496,392,468,1232,468,1228,472,392,468,1232,468,1228,468,396,468,392,468,1232,468,1228,472,392,468,392,468,1232,468,368,496,1228,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,464,396,468,396,468,392,468,396,468,392,468,396,468,392,472,392,468,392,472,392,468,396,468,392,468,396,468,392,468,396,468,392,468,372,492,392,472,372,488,396,468,392,468,396,464,396,472,392,468,392,472,392,468,396,468,392,468,396,464,1232,468,396,464,396,468,396,468,392,468,396,464,396,468,396,468,392,468,396,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,468,392,468,396,468,1208,488,396,468,392,472,392,468,1232,468,1228,468,396,468,392,468,15732,3444,1676,464,1236,468,1232,464,396,468,392,468,396,468,1228,468,396,468,392,472,1228,468,1232,464,396,472,1228,464,396,468,396,468,1232,468,1228,468,396,464,1232,468,1232,468,392,468,396,468,1228,468,396,468,392,468,1232,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,468,392,468,396,468,392,468,392,472,392,468,396,468,392,468,372,492,368,492,396,468,1232,468,392,468,396,468,368,492,396,468,392,472,1228,468,1228,472,392,468,1232,468,392,468,1232,468,1228,468,396,468,1228,468,396,468,396,464,396,468,372,492,392,468,1232,468,1232,464,396,468,1232,464,1232,468,372,492,392,468,1232,468,1232,464,396,468,392,468,1232,468,396,464,1232,468,392,472,392,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,468,368,492,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,468,392,468,396,464,372,492,396,468,392,472,392,468,396,464,1232,468,392,468,396,468,396,464,376,488,396,468,392,468,396,468,392,468,396,468,392,468,396,468,364,500,392,468,396,468,392,468,396,468,396,464,372,492,392,472,1228,468,392,468,396,468,396,464,1232,468,1232,468,392,468,396,468
};  // 27c code
const PROGMEM unsigned int rawCodes_ac_24c[583]={3444,1676,468,1228,472,1228,468,396,464,396,468,396,468,1228,468,396,468,392,468,1212,488,1232,464,396,468,1232,464,396,468,396,464,1236,464,1232,468,396,468,1228,468,1232,464,396,468,396,468,1208,488,396,468,392,472,1228,468,396,464,372,492,368,496,368,492,396,464,396,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,468,392,468,372,492,392,468,396,468,392,468,396,468,1232,468,392,468,396,468,392,468,396,464,396,468,1232,468,392,468,396,468,1228,472,392,468,396,464,396,468,396,468,1232,464,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,468,1228,468,1232,468,396,468,392,468,1232,468,1228,468,396,464,396,468,1232,468,396,464,1232,468,368,496,392,468,396,468,392,468,396,464,396,468,396,468,396,464,396,468,392,468,396,468,392,472,392,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,468,392,468,396,468,392,468,396,464,376,492,392,468,392,468,396,468,392,472,392,468,396,468,392,468,396,468,396,468,1228,468,372,492,368,492,396,464,376,488,396,464,396,468,396,468,392,472,392,468,396,468,392,468,396,468,392,468,392,468,376,488,380,484,396,464,372,492,396,464,396,468,396,464,396,468,1232,468,1232,472,388,468,396,464,396,468,15732,3444,1676,468,1232,464,1232,468,396,464,400,464,396,464,1232,468,396,468,396,464,1232,468,1232,464,396,468,1232,468,392,468,396,468,1228,468,1232,468,392,472,1228,468,1232,468,392,468,372,492,1188,508,396,468,392,472,1228,468,396,464,396,468,396,468,396,444,416,464,372,492,396,468,396,464,372,492,396,468,396,464,392,472,396,464,396,468,396,464,396,468,392,468,396,468,372,488,396,468,1232,468,392,468,396,468,392,468,360,504,392,468,1208,492,392,472,392,468,1232,444,416,468,396,464,396,468,396,468,1228,468,396,468,396,464,400,464,396,464,396,468,396,468,396,464,396,468,1232,468,1228,468,392,472,392,468,1232,468,1228,468,396,468,392,448,1252,468,396,468,1228,468,368,496,392,468,396,468,392,468,372,492,392,468,396,468,396,464,396,468,396,464,396,468,396,468,368,492,396,468,400,460,396,448,416,464,396,468,392,472,392,468,396,464,396,448,416,468,392,468,396,468,392,468,396,468,396,464,396,468,396,464,372,492,396,468,392,468,400,464,396,464,396,468,392,468,1232,468,396,464,400,464,396,468,392,472,392,468,392,468,396,468,392,472,368,492,396,468,392,468,396,468,396,468,392,468,396,464,396,468,396,464,396,468,396,468,392,468,396,468,392,468,1232,468,1232,464,396,468,396,468,392,472
};  // 24c code
const PROGMEM unsigned int rawCodes_ac_30c[583]={3448,1676,464,1208,492,1232,468,396,464,396,468,340,520,1232,468,396,464,396,468,1232,468,1228,472,392,464,1236,464,368,496,376,488,1228,468,1232,468,392,468,1212,488,1232,464,372,492,396,464,1232,464,396,468,372,496,1228,468,392,472,392,468,392,472,392,468,396,464,396,468,392,468,396,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,392,472,388,472,396,468,1228,468,396,468,372,492,392,468,396,468,392,468,1208,492,392,468,396,468,1228,468,396,468,392,468,1232,468,1232,468,1228,468,396,468,392,468,396,468,396,468,392,468,396,464,308,556,396,468,1228,468,1232,468,392,468,396,468,1232,464,1232,464,400,468,392,468,1232,468,396,464,1232,468,392,468,396,468,372,492,392,468,396,468,392,468,396,468,368,492,396,464,396,468,396,468,396,464,396,472,392,468,372,492,392,468,396,468,392,468,392,468,396,468,368,496,392,468,396,468,392,448,416,468,396,464,396,464,400,464,396,468,392,468,396,468,396,468,392,468,396,468,392,468,396,468,396,464,1232,468,392,472,392,468,396,468,392,468,396,468,392,468,368,496,396,468,392,468,392,472,392,468,396,468,392,468,396,468,392,468,396,468,372,488,396,468,396,464,396,468,1232,468,1204,492,1232,468,1232,464,396,468,396,464,396,468,15732,3444,1652,492,1208,492,1228,468,396,464,396,468,396,468,1232,464,396,468,392,472,1228,468,1232,468,392,468,1232,464,396,468,396,468,1232,464,1232,468,396,468,1232,464,1232,468,396,556,304,468,1228,468,396,468,396,468,1228,468,396,468,392,468,396,468,396,464,396,468,396,464,396,468,396,468,392,468,396,468,392,468,396,468,392,472,372,488,396,464,396,464,400,468,392,468,396,468,392,468,1232,468,392,468,396,468,396,464,396,468,396,464,1232,468,396,468,396,468,1228,468,392,472,392,468,1232,464,1232,468,1232,468,292,568,396,468,392,472,392,468,396,468,368,492,396,464,396,468,1232,464,1232,468,396,468,396,464,1232,468,1204,492,396,468,396,468,1228,472,392,468,1228,472,392,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,392,472,392,468,396,468,396,464,368,496,392,468,396,468,392,468,372,488,396,468,396,468,396,468,392,468,396,468,392,468,396,468,392,468,396,468,396,464,396,468,396,468,392,468,400,460,396,468,396,464,396,468,396,468,1228,468,372,492,392,468,396,468,396,464,396,468,396,468,396,468,392,464,396,468,396,468,396,464,396,468,396,468,392,468,396,468,396,464,396,468,396,468,392,468,372,492,1228,468,1232,468,1204,492,1232,468,392,472,392,468,396,464
};  // 30c code
const PROGMEM unsigned int rawCodes_ac_op[583]={3428,1700,440,1252,448,1252,448,412,448,416,444,416,448,1252,444,416,448,412,452,1252,444,1252,448,416,444,1252,448,412,452,412,448,1252,448,1252,444,416,448,1252,444,1252,448,416,448,416,444,1252,444,420,444,412,452,1252,444,416,448,416,444,416,448,416,448,416,444,416,448,416,444,416,448,416,444,416,448,416,444,416,448,416,448,412,520,344,448,416,444,416,448,416,444,416,524,340,448,1248,448,416,448,412,448,416,444,416,448,416,448,1248,448,1256,444,412,452,1252,444,392,472,1252,444,1252,448,416,520,1180,444,416,444,416,448,416,448,412,448,416,448,1252,444,1252,448,416,444,1252,448,1248,448,416,448,412,452,1248,448,1252,448,412,448,416,448,1248,448,412,452,1252,444,392,472,416,448,412,448,416,448,416,444,416,448,416,444,416,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,416,444,416,520,344,444,416,452,412,448,416,444,416,448,376,484,416,448,416,444,416,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,416,444,420,444,412,448,416,448,1248,448,420,444,416,448,412,448,416,448,416,444,420,444,416,444,420,444,416,448,412,448,416,448,412,448,416,448,412,448,416,448,416,448,412,448,412,452,412,448,1252,444,420,444,392,472,416,444,1252,448,1252,444,416,448,416,448,15752,3476,1644,448,1248,448,1252,448,416,444,416,448,412,452,1248,448,412,448,416,448,1252,448,1248,448,416,448,1248,520,344,448,416,444,1256,444,1252,448,412,448,1252,448,1248,448,380,484,412,452,1248,448,416,448,416,444,1252,448,408,452,416,448,412,448,412,452,416,500,364,444,412,504,336,472,412,452,412,504,360,504,360,496,364,448,416,500,360,500,364,448,416,444,416,500,360,500,364,504,1192,448,416,500,360,448,412,504,364,444,416,500,1200,448,1248,448,416,448,1252,444,416,448,1248,448,1252,448,412,452,1248,448,416,500,360,448,416,500,360,500,364,500,1200,500,1196,448,412,452,1248,500,1200,448,412,448,416,500,1196,452,1176,576,356,504,360,504,1156,488,412,504,1196,500,364,500,360,500,360,504,360,500,360,500,364,500,360,504,360,500,364,496,364,500,360,500,364,504,360,500,364,496,364,500,364,496,280,672,248,524,364,500,360,500,364,500,364,500,360,504,360,496,364,500,364,496,368,496,364,500,364,496,344,520,364,496,364,500,364,496,368,472,388,472,392,472,392,492,1204,496,340,524,364,472,388,496,368,496,368,472,388,496,368,472,388,472,368,496,388,476,384,476,388,476,388,472,388,476,388,472,388,476,388,472,388,476,388,472,1228,472,388,476,388,472,388,476,1224,472,1228,472,388,472,392,472
};  // open code
const PROGMEM unsigned int rawCodes_ac_cl[583]={3444,1676,468,1228,468,1232,464,396,468,396,468,392,468,1208,492,396,464,372,492,1232,468,1228,468,396,468,1228,468,396,468,396,464,1232,468,1204,496,392,468,1232,468,1228,468,396,468,392,472,1228,468,392,468,396,468,1232,464,396,468,396,468,392,468,396,464,396,468,372,492,372,492,392,468,396,468,392,468,396,464,396,468,396,468,392,468,372,492,368,492,396,468,392,448,416,468,392,472,392,468,396,468,392,468,396,468,392,472,392,468,1228,472,1228,468,396,468,1204,492,396,468,1228,468,1232,468,396,468,1228,468,392,472,392,472,392,468,392,472,392,468,1232,468,1228,496,368,468,388,476,392,468,1228,496,368,496,1200,496,1204,496,364,500,1200,496,368,496,340,520,1204,496,364,500,364,496,364,500,364,496,364,500,364,500,364,496,364,500,360,500,364,500,364,500,360,500,364,500,360,500,364,500,364,496,364,500,360,504,360,500,360,504,360,500,360,504,360,500,340,524,360,500,336,528,360,500,364,500,364,500,360,500,364,500,360,500,364,500,360,504,360,500,360,500,364,500,1200,500,360,500,340,524,360,500,332,532,360,504,360,500,332,532,360,500,360,504,336,524,364,500,360,500,340,524,336,528,360,500,364,500,360,500,364,500,360,500,1196,504,360,500,364,500,1196,500,1200,500,360,504,360,500,360,504,15696,3480,1644,496,1200,500,1200,500,360,500,364,500,360,500,1200,500,360,500,364,504,1196,500,1196,500,364,500,1196,500,364,500,360,500,1200,476,1220,480,380,504,1200,500,1196,500,364,500,360,500,1200,500,360,500,364,500,1200,496,364,500,360,500,364,472,392,472,388,476,388,472,388,476,388,472,388,476,384,476,388,472,392,472,368,492,392,472,392,468,392,472,392,468,396,468,392,472,392,468,392,448,412,472,392,472,392,468,392,472,392,468,1228,472,1228,472,364,496,1228,472,392,468,1228,472,1224,476,388,472,1228,472,388,476,388,472,392,472,388,472,388,476,1224,496,1176,500,388,500,364,496,364,476,1224,472,388,476,1224,472,1228,496,364,476,1224,472,384,480,388,472,1200,496,388,480,384,500,364,472,392,496,288,572,364,500,364,476,388,472,388,476,388,496,364,500,364,500,336,500,364,500,384,476,388,476,384,500,364,500,364,472,388,500,336,524,336,504,388,476,388,472,364,500,388,472,388,476,388,496,364,476,388,476,384,476,384,476,388,500,364,472,388,476,388,472,388,476,1224,472,364,496,392,472,392,472,388,472,392,472,388,476,388,472,364,496,368,496,392,468,392,472,392,472,388,472,392,448,416,468,392,448,416,444,416,472,392,448,1248,448,392,496,392,444,1252,448,1252,448,412,448,416,448,412,448
};  // close code
const PROGMEM unsigned int rawCodes_ac_cold[583]={3416,1728,412,1264,436,1260,436,452,412,448,412,452,412,1284,416,448,412,448,416,1260,436,1260,440,448,412,1264,436,448,412,452,412,1260,440,1260,436,448,416,1260,436,1236,464,448,412,452,412,1264,436,448,412,448,416,1284,412,448,416,448,412,448,416,448,412,452,412,452,412,448,412,448,416,448,412,448,416,448,412,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,1288,412,448,412,452,412,448,412,452,412,448,416,1260,436,1264,436,448,412,1260,440,448,412,1252,448,1260,440,448,412,1284,416,448,412,448,416,448,412,448,416,448,416,1260,436,1284,416,448,412,1256,444,1260,436,448,416,448,412,1260,440,1260,440,448,412,448,416,1284,412,448,416,1260,436,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,452,412,448,412,452,412,448,416,448,412,448,416,448,412,452,412,448,412,452,412,420,440,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,1260,436,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,420,444,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,1284,412,452,412,448,412,452,412,1260,440,1260,436,448,416,448,412,15764,3416,1704,436,1264,436,1260,436,452,412,448,416,448,412,1260,440,448,412,448,416,1260,436,1264,436,448,412,1264,436,448,416,448,412,1288,412,1260,436,448,416,1260,436,1264,436,448,412,452,412,1264,436,448,412,448,416,1260,436,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,416,1256,440,448,416,448,412,448,416,448,412,448,416,1284,412,1288,412,448,412,1288,412,448,416,1284,412,1260,440,448,412,1264,436,448,412,452,412,448,416,448,412,448,416,1260,436,1256,444,448,412,1260,440,1260,436,452,412,448,416,1260,436,1260,440,420,440,448,416,1284,412,448,416,1260,436,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,452,412,1260,436,452,412,448,416,448,412,448,416,448,412,452,412,448,412,448,416,448,412,452,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,448,412,448,416,1260,436,424,440,448,416,448,412,1264,436,1260,436,448,416,448,412
};  // cold mode code
const PROGMEM unsigned int rawCodes_ac_warm[583]={3448,1676,468,1228,468,1232,464,372,492,368,496,396,464,1232,468,392,468,396,468,1232,464,1232,468,396,468,1228,468,396,468,392,468,1232,468,1228,468,396,468,1232,468,1228,468,396,468,392,468,1232,468,392,472,392,468,1228,472,392,468,368,496,392,468,396,468,392,468,396,468,396,468,392,468,368,496,344,516,368,492,356,508,396,468,368,492,396,468,392,468,396,468,392,468,396,468,392,472,1228,468,396,464,396,468,396,468,392,468,396,468,1228,468,396,468,392,472,1228,468,396,468,392,468,396,468,1228,472,392,468,392,468,396,468,396,464,396,468,396,464,396,468,396,468,392,472,1228,464,1236,464,396,468,392,472,1228,468,1232,468,392,468,396,468,1228,468,396,468,1232,464,396,468,396,464,396,468,396,468,392,468,396,468,392,472,392,468,396,464,396,468,396,464,396,468,396,464,396,468,396,468,396,464,396,468,396,464,396,468,368,492,396,468,396,468,392,468,396,468,392,468,368,496,392,468,396,468,396,468,368,492,396,468,392,472,368,492,372,488,396,468,392,472,392,468,1208,492,392,468,372,488,396,468,372,492,392,472,392,468,392,468,396,468,372,488,396,468,396,464,396,468,396,468,392,468,372,492,392,472,392,468,396,468,392,468,396,468,392,468,1232,468,392,472,1200,496,392,468,396,468,396,468,15704,3472,1672,476,1224,496,1200,500,340,520,364,500,364,500,1196,504,360,500,360,504,1196,504,1196,500,360,504,1196,504,356,504,360,500,1196,504,1196,504,360,500,1196,504,1196,504,356,504,360,500,1196,504,360,504,356,504,1196,504,360,500,360,504,360,500,360,504,360,504,356,504,336,524,360,504,360,504,360,500,360,500,340,524,360,500,364,472,388,472,392,472,392,472,388,472,392,468,396,468,1228,468,396,468,392,468,372,492,392,472,392,468,1228,468,396,468,372,492,1228,472,392,468,392,472,392,468,1232,468,392,468,396,468,392,468,396,468,392,468,396,468,392,468,368,500,388,472,1228,468,1228,472,392,468,392,468,1232,468,1232,468,392,468,396,468,1228,468,396,468,1232,468,392,468,396,468,392,468,396,468,392,468,372,492,396,468,392,468,396,468,392,468,372,492,392,468,396,464,400,464,396,468,392,472,392,468,396,468,392,468,396,468,392,468,360,504,392,468,396,468,392,472,392,468,392,472,392,468,396,468,368,492,396,468,392,472,392,468,392,468,396,468,392,472,392,468,1232,468,392,468,368,496,392,468,396,468,392,468,396,468,392,468,396,468,396,468,392,468,352,512,392,472,392,468,392,468,396,468,392,468,396,468,396,468,392,468,368,496,392,468,1232,468,392,476,1224,468,396,464,396,468,396,468
};  // warm mode code


int n;
int k;   

int count = 0;
int count_close = 0;
int time_p = 0;

const int buttonstate_op = 8; // open button
const int buttonstate_on = 6;

int val_op = 0;  // Check state
int val_on = 0;  // Check state
int old_val_on = 0; 
int state = 0; 

int val = 0;            //存储获取到的PIR数值
int PIR_sensor = A0;    //指定PIR模拟端口 A0

#include <dht11.h>        // load temp and moisture detector
dht11 DHT11;
#define DHT11PIN 7
void(* resetFunc) (void) = 0; //制造重启命令
 
IRsend irsend;                          // 定义 IRsend 物件来发射红外线讯号
 

void setup()
{
  pinMode(PIR_sensor, INPUT);   //设置PIR模拟端口为输入模式
  pinMode(buttonstate_op,INPUT);
  pinMode(buttonstate_on,OUTPUT);

  pinMode(3, OUTPUT);   
  digitalWrite(3, HIGH);   // 点亮LED测试（需通过手机摄像模式观察） 你可以开始插个led灯来观察led灯是否亮，如果亮就可以换成红外线发射灯了
  delay(3000);             // 等待3秒
  digitalWrite(3, LOW);    // 结束测试

  Serial.begin(9600);    // 温度传感

    Voice.init();//初始化VoiceRecognition模块   
    Voice.addCommand("kai ji",0);                     //添加指令，参数1:指令内容，参数2：指令标签（可重复）
    Voice.addCommand("gei lao zi kai kong tiao",0); 
                                                   //如“北京”和“首都”代表同样含义，则可共用标签。无返回
    Voice.addCommand("guan ji",1);                    //添加指令，参数（指令内容，指令标签（可重复））
    Voice.addCommand("gei lao zi guan kong tiao",1); 
    Voice.start();                                 //开始识别
}


 
void loop()
{
 
  while(1)
  {  
  
  
  
  
    val_op = digitalRead(buttonstate_op);
    if(val_op==LOW)
    {
     digitalWrite(buttonstate_on,HIGH); 
     
     
      
    
      switch(Voice.read())                //判断识别内容，在有识别结果的情况下Voice.Read()会返回该指令标签，否则返回-1
    {
      case 0://若是指令“kai”
      Serial.println("kaiji");
      unsigned int shuzu_op[583];
      for (k = 0; k<583; k++)
    {
      shuzu_op[k] = pgm_read_word_near(rawCodes_ac_op + k);
    }
      irsend.sendRaw(shuzu_op,583,38);
      Serial.println("open code sended"); 
      break;
      case 1://若是指令“guan”
      Serial.println("guanji");
      unsigned int shuzu_cl[583];
      for (k = 0; k<583; k++)
    {
      shuzu_cl[k] = pgm_read_word_near(rawCodes_ac_cl + k);
    }
      irsend.sendRaw(shuzu_cl,583, 38);
      Serial.println("close code sended");
      break;   
    }
    wdt_reset();
  
    
    
    val = analogRead(PIR_sensor);                        //DHT11温控模块，获取温湿度
    Serial.println();
    int chk = DHT11.read(DHT11PIN);
    Serial.print("Read sensor: ");
    Serial.print("Humidity (%): ");
    Serial.println((float)DHT11.humidity, 2);
    Serial.print("Temperature (oC): ");
    Serial.println((float)DHT11.temperature, 2);
    delay(2000);          

  digitalWrite(buttonstate_on,LOW);

    
    if(val > 300)       // 人体红外传感数值  有人一般为600+ 没人则为0
    {
    Serial.print("count =");  // count值测试，决定温度区间
    Serial.print((int)count);
    count_close = 0;  // 红外感应关机条件，在有人的时候清零
    time_p = 0;       // 红外感应关机条件，计数器模块，可调节，在val值变化时清零
    
    if((float)DHT11.temperature >= 32.0 and count == 0)
     {
      unsigned int shuzu_16c[583];
    for (k = 0; k<583; k++)
  {
    shuzu_16c[k] = pgm_read_word_near(rawCodes_ac_16c + k);
  }
    irsend.sendRaw(shuzu_16c,583, 38);
    Serial.println("16c code sended");
    count = 5;         //count变为5，不再满足=0条件，使16度代码只发送一次
    //测试count值
    Serial.print("count ="); 
    Serial.print((int)count);
     }
     

    if((float)DHT11.temperature <= 27.0 and count == 0)
    { 
      unsigned int shuzu_27c[583];
    for (k = 0; k<583; k++)
  {
    shuzu_27c[k] = pgm_read_word_near(rawCodes_ac_27c + k);
  }
    irsend.sendRaw(shuzu_27c,583, 38);
    Serial.println("27c code sended");
    count = 3;
    Serial.print("count =");
    Serial.print((int)count);
   }

    if (((float)DHT11.temperature > 27.0) and ((float)DHT11.temperature < 32.0))
      {
      count = 0;
      Serial.print("count =");
      Serial.print((int)count);
      }
    }
    else
    {
      
      if(count_close == 0 and time_p > 75){
      unsigned int shuzu_cl[583];
    for (k = 0; k<583; k++)
  {
    shuzu_cl[k] = pgm_read_word_near(rawCodes_ac_cl + k);
  }
    irsend.sendRaw(shuzu_cl,583, 38);
    Serial.println("Close code sended");
      
      count_close = 5;
      }
      time_p = time_p + 1;
      delay(2000);
      Serial.print("time = ");
      Serial.print(time_p);
      }
    }
      else if(val_op==HIGH)  //------------------------------------------------------
      {
        digitalWrite(buttonstate_on,LOW); 
        
    
      switch(Voice.read())                //判断识别内容，在有识别结果的情况下Voice.Read()会返回该指令标签，否则返回-1
    {
      case 0://若是指令“kai”
      Serial.println("kaiji");
      unsigned int shuzu_op[583];
      for (k = 0; k<583; k++)
    {
      shuzu_op[k] = pgm_read_word_near(rawCodes_ac_op + k);
    }
      irsend.sendRaw(shuzu_op,583, 38);
      Serial.println("open code sended");
      
      break;
      case 1://若是指令“guan”
      Serial.println("guanji");
      unsigned int shuzu_cl[583];
      for (k = 0; k<583; k++)
    {
      shuzu_cl[k] = pgm_read_word_near(rawCodes_ac_cl + k);
    }
      irsend.sendRaw(shuzu_cl,583, 38);
      Serial.println("close code sended");
      break;   
    }
    wdt_reset();
  
    
    
    val = analogRead(PIR_sensor);                        //DHT11温控模块，获取温湿度
    Serial.println();
    int chk = DHT11.read(DHT11PIN);
    Serial.print("Read sensor: ");
    Serial.print("Humidity (%): ");
    Serial.println((float)DHT11.humidity, 2);
    Serial.print("Temperature (oC): ");
    Serial.println((float)DHT11.temperature, 2);
    delay(2000);          


    
    if(val > 300)       // 人体红外传感数值  有人一般为600+ 没人则为0
    {
    Serial.print("count =");  // count值测试，决定温度区间
    Serial.print((int)count);
    count_close = 0;  // 红外感应关机条件，在有人的时候清零
    time_p = 0;       // 红外感应关机条件，计数器模块，可调节，在val值变化时清零
    
    if((float)DHT11.temperature <= 15.0 and count == 0)
     {
      unsigned int shuzu_30c[583];
    for (k = 0; k<583; k++)
  {
    shuzu_30c[k] = pgm_read_word_near(rawCodes_ac_30c + k);
  }
    irsend.sendRaw(shuzu_30c,583, 38);
    Serial.println("30c code sended");
    count = 5;         //count变为5，不再满足=0条件，使16度代码只发送一次
    //测试count值
    Serial.print("count ="); 
    Serial.print((int)count);
     }
     

    if((float)DHT11.temperature >= 24.0 and count == 0)
    { 
      unsigned int shuzu_24c[583];
    for (k = 0; k<583; k++)
  {
    shuzu_24c[k] = pgm_read_word_near(rawCodes_ac_24c + k);
  }
    irsend.sendRaw(shuzu_24c,583, 38);
    Serial.println("24c code sended");
    count = 3;
    Serial.print("count =");
    Serial.print((int)count);
   }

    if (((float)DHT11.temperature > 15.0) and ((float)DHT11.temperature < 24.0))
      {
      count = 0;
      Serial.print("count =");
      Serial.print((int)count);
      }
    }
    else
    {
      
      if(count_close == 0 and time_p > 75){
      unsigned int shuzu_cl[583];
    for (k = 0; k<583; k++)
  {
    shuzu_cl[k] = pgm_read_word_near(rawCodes_ac_cl + k);
  }
    irsend.sendRaw(shuzu_cl,583, 38);
    Serial.println("Close code sended");
      
      count_close = 5;
      }
      time_p = time_p + 1;
      delay(2000);
      Serial.print("time = ");
      Serial.print(time_p);
      }
      }
  
  } 
}

